/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class Station : NamedId {
  private HandleRef swigCPtr;

  internal Station(IntPtr cPtr, bool cMemoryOwn) : base(netspireSDKPINVOKE.Station_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Station obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Station() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_Station(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Station() : this(netspireSDKPINVOKE.new_Station__SWIG_0(), true) {
  }

  public Station(int id) : this(netspireSDKPINVOKE.new_Station__SWIG_1(id), true) {
  }

  public void setIsMajor(bool isMajor) {
    netspireSDKPINVOKE.Station_setIsMajor(swigCPtr, isMajor);
  }

  public bool isMajor() {
    bool ret = netspireSDKPINVOKE.Station_isMajor(swigCPtr);
    return ret;
  }

  public void setPlatformsListAsString(string platformsListAsString) {
    netspireSDKPINVOKE.Station_setPlatformsListAsString(swigCPtr, platformsListAsString);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getPlatformsListAsString() {
    string ret = netspireSDKPINVOKE.Station_getPlatformsListAsString(swigCPtr);
    return ret;
  }

  public PlatformInfoList getListOfPlatforms() {
    PlatformInfoList ret = new PlatformInfoList(netspireSDKPINVOKE.Station_getListOfPlatforms(swigCPtr), true);
    return ret;
  }

  public PlatformInfo getPlatform(int platformId) {
    PlatformInfo ret = new PlatformInfo(netspireSDKPINVOKE.Station_getPlatform(swigCPtr, platformId), true);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
