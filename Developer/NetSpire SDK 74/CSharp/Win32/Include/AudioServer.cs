/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class AudioServer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AudioServer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(AudioServer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~AudioServer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_AudioServer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public AudioServer() : this(netspireSDKPINVOKE.new_AudioServer(), true) {
  }

  public void connect(StringArray serverAddresses, KeyValueMap config) {
    netspireSDKPINVOKE.AudioServer_connect(swigCPtr, StringArray.getCPtr(serverAddresses), KeyValueMap.getCPtr(config));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDynamicConfiguration(KeyValueMap dynamicConfig) {
    netspireSDKPINVOKE.AudioServer_setDynamicConfiguration(swigCPtr, KeyValueMap.getCPtr(dynamicConfig));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public KeyValueMap getDynamicConfiguration() {
    KeyValueMap ret = new KeyValueMap(netspireSDKPINVOKE.AudioServer_getDynamicConfiguration(swigCPtr), true);
    return ret;
  }

  public void registerObserver(AudioServerObserver observer) {
    netspireSDKPINVOKE.AudioServer_registerObserver(swigCPtr, AudioServerObserver.getCPtr(observer));
  }

  public void disconnect() {
    netspireSDKPINVOKE.AudioServer_disconnect(swigCPtr);
  }

  public bool isAudioConnected() {
    bool ret = netspireSDKPINVOKE.AudioServer_isAudioConnected(swigCPtr);
    return ret;
  }

  public bool isCommsEstablished() {
    bool ret = netspireSDKPINVOKE.AudioServer_isCommsEstablished(swigCPtr);
    return ret;
  }

  public PAController getPAController() {
    IntPtr cPtr = netspireSDKPINVOKE.AudioServer_getPAController(swigCPtr);
    PAController ret = (cPtr == IntPtr.Zero) ? null : new PAController(cPtr, false);
    return ret;
  }

  public CallController getCallController() {
    IntPtr cPtr = netspireSDKPINVOKE.AudioServer_getCallController(swigCPtr);
    CallController ret = (cPtr == IntPtr.Zero) ? null : new CallController(cPtr, false);
    return ret;
  }

  public ConfigController getConfigController() {
    IntPtr cPtr = netspireSDKPINVOKE.AudioServer_getConfigController(swigCPtr);
    ConfigController ret = (cPtr == IntPtr.Zero) ? null : new ConfigController(cPtr, false);
    return ret;
  }

  public PassengerInformationServer getPassengerInformationServer() {
    IntPtr cPtr = netspireSDKPINVOKE.AudioServer_getPassengerInformationServer(swigCPtr);
    PassengerInformationServer ret = (cPtr == IntPtr.Zero) ? null : new PassengerInformationServer(cPtr, false);
    return ret;
  }

  public void initiateDeviceHealthTest(string deviceId) {
    netspireSDKPINVOKE.AudioServer_initiateDeviceHealthTest(swigCPtr, deviceId);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDeviceIsolation(string deviceId, bool enable) {
    netspireSDKPINVOKE.AudioServer_setDeviceIsolation(swigCPtr, deviceId, enable);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setDeviceList(SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t deviceList) {
    netspireSDKPINVOKE.AudioServer_setDeviceList(swigCPtr, SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t.getCPtr(deviceList));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public DeviceStateArray getDeviceStates(string deviceId) {
    DeviceStateArray ret = new DeviceStateArray(netspireSDKPINVOKE.AudioServer_getDeviceStates__SWIG_0(swigCPtr, deviceId), true);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeviceStateArray getDeviceStates() {
    DeviceStateArray ret = new DeviceStateArray(netspireSDKPINVOKE.AudioServer_getDeviceStates__SWIG_1(swigCPtr), true);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool updateDictionary(string filename) {
    bool ret = netspireSDKPINVOKE.AudioServer_updateDictionary(swigCPtr, filename);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DictionaryChangesetItemArray getDictionaryChangeset() {
    DictionaryChangesetItemArray ret = new DictionaryChangesetItemArray(netspireSDKPINVOKE.AudioServer_getDictionaryChangeset(swigCPtr), true);
    return ret;
  }

  public DictionaryItemArray getDictionaryItems() {
    DictionaryItemArray ret = new DictionaryItemArray(netspireSDKPINVOKE.AudioServer_getDictionaryItems(swigCPtr), true);
    return ret;
  }

  public void setOutputGain(Gain gain) {
    netspireSDKPINVOKE.AudioServer_setOutputGain(swigCPtr, Gain.getCPtr(gain));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Gain getOutputGain(string deviceId) {
    Gain ret = new Gain(netspireSDKPINVOKE.AudioServer_getOutputGain(swigCPtr, deviceId), true);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AudioServer.Role getRole(string deviceId) {
    AudioServer.Role ret = (AudioServer.Role)netspireSDKPINVOKE.AudioServer_getRole(swigCPtr, deviceId);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool uploadFile(string fileName) {
    bool ret = netspireSDKPINVOKE.AudioServer_uploadFile(swigCPtr, fileName);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getSystemRevision() {
    string ret = netspireSDKPINVOKE.AudioServer_getSystemRevision(swigCPtr);
    return ret;
  }

  public bool isSystemRevisionConsistent() {
    bool ret = netspireSDKPINVOKE.AudioServer_isSystemRevisionConsistent(swigCPtr);
    return ret;
  }

  public void initiateShutdown() {
    netspireSDKPINVOKE.AudioServer_initiateShutdown(swigCPtr);
  }

  public EventItemArray getEventList() {
    EventItemArray ret = new EventItemArray(netspireSDKPINVOKE.AudioServer_getEventList(swigCPtr), true);
    return ret;
  }

  public string getSDKRevision() {
    string ret = netspireSDKPINVOKE.AudioServer_getSDKRevision(swigCPtr);
    return ret;
  }

  public uint playMessage(StringArray zones, StringArray visualDevices, Gain gain, NumberArray dictionaryItems, string visualText, bool resumeOnInterruptFlag, bool overrideExisting, uint validityPeriod, uint priority, uint mode) {
    uint ret = netspireSDKPINVOKE.AudioServer_playMessage(swigCPtr, StringArray.getCPtr(zones), StringArray.getCPtr(visualDevices), Gain.getCPtr(gain), NumberArray.getCPtr(dictionaryItems), visualText, resumeOnInterruptFlag, overrideExisting, validityPeriod, priority, mode);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public AudioServer.TCTState getTCTState() {
    AudioServer.TCTState ret = (AudioServer.TCTState)netspireSDKPINVOKE.AudioServer_getTCTState(swigCPtr);
    return ret;
  }

  public void enableAlarmManagement() {
    netspireSDKPINVOKE.AudioServer_enableAlarmManagement(swigCPtr);
  }

  public void disableAlarmManagement() {
    netspireSDKPINVOKE.AudioServer_disableAlarmManagement(swigCPtr);
  }

  public bool getAlarmManagement() {
    bool ret = netspireSDKPINVOKE.AudioServer_getAlarmManagement(swigCPtr);
    return ret;
  }

  public AlarmArray getAlarms() {
    AlarmArray ret = new AlarmArray(netspireSDKPINVOKE.AudioServer_getAlarms(swigCPtr), true);
    return ret;
  }

  public Device findByDeviceId(string deviceId) {
    IntPtr cPtr = netspireSDKPINVOKE.AudioServer_findByDeviceId(swigCPtr, deviceId);
    Device ret = (cPtr == IntPtr.Zero) ? null : new Device(cPtr, false);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Device findByDstNo(int dstNo) {
    IntPtr cPtr = netspireSDKPINVOKE.AudioServer_findByDstNo(swigCPtr, dstNo);
    Device ret = (cPtr == IntPtr.Zero) ? null : new Device(cPtr, false);
    return ret;
  }

  public PaSinkArray getAudioSinks(int sourceId) {
    PaSinkArray ret = new PaSinkArray(netspireSDKPINVOKE.AudioServer_getAudioSinks__SWIG_0(swigCPtr, sourceId), true);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PaSinkArray getAudioSinks() {
    PaSinkArray ret = new PaSinkArray(netspireSDKPINVOKE.AudioServer_getAudioSinks__SWIG_1(swigCPtr), true);
    return ret;
  }

  public enum Role {
    NONE,
    LEVEL1,
    LEVEL2
  }

  public enum TCTState {
    TCT_IDLE,
    TCT_STARTED,
    TCT_FINISHED
  }

}

}
