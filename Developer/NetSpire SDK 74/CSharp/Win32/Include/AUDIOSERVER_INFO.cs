/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class AUDIOSERVER_INFO : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AUDIOSERVER_INFO(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(AUDIOSERVER_INFO obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~AUDIOSERVER_INFO() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_AUDIOSERVER_INFO(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public DeviceStateArrayPtr deviceList {
    set {
      netspireSDKPINVOKE.AUDIOSERVER_INFO_deviceList_set(swigCPtr, DeviceStateArrayPtr.getCPtr(value));
    } 
    get {
      IntPtr cPtr = netspireSDKPINVOKE.AUDIOSERVER_INFO_deviceList_get(swigCPtr);
      DeviceStateArrayPtr ret = (cPtr == IntPtr.Zero) ? null : new DeviceStateArrayPtr(cPtr, false);
      return ret;
    } 
  }

  public bool isMaster {
    set {
      netspireSDKPINVOKE.AUDIOSERVER_INFO_isMaster_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.AUDIOSERVER_INFO_isMaster_get(swigCPtr);
      return ret;
    } 
  }

  public KeyValueMap dynamicConfigurationVars {
    set {
      netspireSDKPINVOKE.AUDIOSERVER_INFO_dynamicConfigurationVars_set(swigCPtr, KeyValueMap.getCPtr(value));
    } 
    get {
      IntPtr cPtr = netspireSDKPINVOKE.AUDIOSERVER_INFO_dynamicConfigurationVars_get(swigCPtr);
      KeyValueMap ret = (cPtr == IntPtr.Zero) ? null : new KeyValueMap(cPtr, false);
      return ret;
    } 
  }

  public string systemRevision {
    set {
      netspireSDKPINVOKE.AUDIOSERVER_INFO_systemRevision_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.AUDIOSERVER_INFO_systemRevision_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool systemRevisionConsistent {
    set {
      netspireSDKPINVOKE.AUDIOSERVER_INFO_systemRevisionConsistent_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.AUDIOSERVER_INFO_systemRevisionConsistent_get(swigCPtr);
      return ret;
    } 
  }

  public AUDIOSERVER_INFO() : this(netspireSDKPINVOKE.new_AUDIOSERVER_INFO(), true) {
  }

}

}
