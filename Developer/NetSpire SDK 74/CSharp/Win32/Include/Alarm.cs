/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class Alarm : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Alarm(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Alarm obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Alarm() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_Alarm(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public int key {
    set {
      netspireSDKPINVOKE.Alarm_key_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.Alarm_key_get(swigCPtr);
      return ret;
    } 
  }

  public int almNo {
    set {
      netspireSDKPINVOKE.Alarm_almNo_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.Alarm_almNo_get(swigCPtr);
      return ret;
    } 
  }

  public int almDstNo {
    set {
      netspireSDKPINVOKE.Alarm_almDstNo_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.Alarm_almDstNo_get(swigCPtr);
      return ret;
    } 
  }

  public string almDstName {
    set {
      netspireSDKPINVOKE.Alarm_almDstName_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almDstName_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int almResourceId {
    set {
      netspireSDKPINVOKE.Alarm_almResourceId_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.Alarm_almResourceId_get(swigCPtr);
      return ret;
    } 
  }

  public string almResourceName {
    set {
      netspireSDKPINVOKE.Alarm_almResourceName_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almResourceName_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string almDeviceIndex {
    set {
      netspireSDKPINVOKE.Alarm_almDeviceIndex_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almDeviceIndex_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string almDeviceName {
    set {
      netspireSDKPINVOKE.Alarm_almDeviceName_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almDeviceName_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string almFirstUpdateTime {
    set {
      netspireSDKPINVOKE.Alarm_almFirstUpdateTime_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almFirstUpdateTime_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string almLastUpdateTime {
    set {
      netspireSDKPINVOKE.Alarm_almLastUpdateTime_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almLastUpdateTime_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int almRepeatCount {
    set {
      netspireSDKPINVOKE.Alarm_almRepeatCount_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.Alarm_almRepeatCount_get(swigCPtr);
      return ret;
    } 
  }

  public bool isAlmStateful {
    set {
      netspireSDKPINVOKE.Alarm_isAlmStateful_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.Alarm_isAlmStateful_get(swigCPtr);
      return ret;
    } 
  }

  public bool almCurrentState {
    set {
      netspireSDKPINVOKE.Alarm_almCurrentState_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.Alarm_almCurrentState_get(swigCPtr);
      return ret;
    } 
  }

  public int almLevel {
    set {
      netspireSDKPINVOKE.Alarm_almLevel_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.Alarm_almLevel_get(swigCPtr);
      return ret;
    } 
  }

  public bool almProtected {
    set {
      netspireSDKPINVOKE.Alarm_almProtected_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.Alarm_almProtected_get(swigCPtr);
      return ret;
    } 
  }

  public int almErrorNo {
    set {
      netspireSDKPINVOKE.Alarm_almErrorNo_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.Alarm_almErrorNo_get(swigCPtr);
      return ret;
    } 
  }

  public string almErrorText {
    set {
      netspireSDKPINVOKE.Alarm_almErrorText_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almErrorText_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool isAlmAcknowledged {
    set {
      netspireSDKPINVOKE.Alarm_isAlmAcknowledged_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.Alarm_isAlmAcknowledged_get(swigCPtr);
      return ret;
    } 
  }

  public string almAckTimeStamp {
    set {
      netspireSDKPINVOKE.Alarm_almAckTimeStamp_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almAckTimeStamp_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string almAckUserEndPoint {
    set {
      netspireSDKPINVOKE.Alarm_almAckUserEndPoint_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almAckUserEndPoint_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string almAckUser {
    set {
      netspireSDKPINVOKE.Alarm_almAckUser_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almAckUser_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string almAckDescription {
    set {
      netspireSDKPINVOKE.Alarm_almAckDescription_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.Alarm_almAckDescription_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Alarm() : this(netspireSDKPINVOKE.new_Alarm__SWIG_0(), true) {
  }

  public Alarm(Alarm alarmAnother) : this(netspireSDKPINVOKE.new_Alarm__SWIG_1(Alarm.getCPtr(alarmAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void acknowledgeAlarm(string endPt, string operatorName, string ackDescription) {
    netspireSDKPINVOKE.Alarm_acknowledgeAlarm(swigCPtr, endPt, operatorName, ackDescription);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
