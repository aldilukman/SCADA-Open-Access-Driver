/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class PaZone : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PaZone(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PaZone obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PaZone() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_PaZone(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public uint elemNo {
    set {
      netspireSDKPINVOKE.PaZone_elemNo_set(swigCPtr, value);
    } 
    get {
      uint ret = netspireSDKPINVOKE.PaZone_elemNo_get(swigCPtr);
      return ret;
    } 
  }

  public string id {
    set {
      netspireSDKPINVOKE.PaZone_id_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaZone_id_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int activity {
    set {
      netspireSDKPINVOKE.PaZone_activity_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaZone_activity_get(swigCPtr);
      return ret;
    } 
  }

  public string activityText {
    set {
      netspireSDKPINVOKE.PaZone_activityText_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaZone_activityText_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int announcementType {
    set {
      netspireSDKPINVOKE.PaZone_announcementType_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaZone_announcementType_get(swigCPtr);
      return ret;
    } 
  }

  public string announcementTypeText {
    set {
      netspireSDKPINVOKE.PaZone_announcementTypeText_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaZone_announcementTypeText_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int health {
    set {
      netspireSDKPINVOKE.PaZone_health_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaZone_health_get(swigCPtr);
      return ret;
    } 
  }

  public string healthText {
    set {
      netspireSDKPINVOKE.PaZone_healthText_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaZone_healthText_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PaSinkArray getMembers() {
    PaSinkArray ret = new PaSinkArray(netspireSDKPINVOKE.PaZone_getMembers(swigCPtr), true);
    return ret;
  }

  public PaZone() : this(netspireSDKPINVOKE.new_PaZone__SWIG_0(), true) {
  }

  public PaZone(PaZone paZoneAnother) : this(netspireSDKPINVOKE.new_PaZone__SWIG_1(PaZone.getCPtr(paZoneAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
