/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class Service : Trip {
  private HandleRef swigCPtr;

  internal Service(IntPtr cPtr, bool cMemoryOwn) : base(netspireSDKPINVOKE.Service_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Service obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Service() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_Service(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Service() : this(netspireSDKPINVOKE.new_Service__SWIG_0(), true) {
  }

  public Service(int id) : this(netspireSDKPINVOKE.new_Service__SWIG_1(id), true) {
  }

  public Service(int id, int tripId, int startTime) : this(netspireSDKPINVOKE.new_Service__SWIG_2(id, tripId, startTime), true) {
  }

  public void setTripId(int tripId) {
    netspireSDKPINVOKE.Service_setTripId(swigCPtr, tripId);
  }

  public int getTripId() {
    int ret = netspireSDKPINVOKE.Service_getTripId(swigCPtr);
    return ret;
  }

  public void setStartTime(uint startTime) {
    netspireSDKPINVOKE.Service_setStartTime(swigCPtr, startTime);
  }

  public uint getStartTime() {
    uint ret = netspireSDKPINVOKE.Service_getStartTime(swigCPtr);
    return ret;
  }

  public void setVehicleId(int vehicleId) {
    netspireSDKPINVOKE.Service_setVehicleId(swigCPtr, vehicleId);
  }

  public int getVehicleId() {
    int ret = netspireSDKPINVOKE.Service_getVehicleId(swigCPtr);
    return ret;
  }

  public void setFollowingStopsListAsString(string followingStopsListAsString) {
    netspireSDKPINVOKE.Service_setFollowingStopsListAsString(swigCPtr, followingStopsListAsString);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getFollowingStopsListAsString() {
    string ret = netspireSDKPINVOKE.Service_getFollowingStopsListAsString(swigCPtr);
    return ret;
  }

  public void setState(Service.State state) {
    netspireSDKPINVOKE.Service_setState(swigCPtr, (int)state);
  }

  public Service.State getState() {
    Service.State ret = (Service.State)netspireSDKPINVOKE.Service_getState(swigCPtr);
    return ret;
  }

  public void setStateText(string stateText) {
    netspireSDKPINVOKE.Service_setStateText(swigCPtr, stateText);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getStateText() {
    string ret = netspireSDKPINVOKE.Service_getStateText(swigCPtr);
    return ret;
  }

  public void setStops(SWIGTYPE_p_std__listT_ServiceStop_t stops) {
    netspireSDKPINVOKE.Service_setStops(swigCPtr, SWIGTYPE_p_std__listT_ServiceStop_t.getCPtr(stops));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public ServiceStopList getStopsSchedule() {
    ServiceStopList ret = new ServiceStopList(netspireSDKPINVOKE.Service_getStopsSchedule(swigCPtr), true);
    return ret;
  }

  public enum State {
    NOT_STARTED,
    RUNNING,
    APPROACHING_STATION,
    IN_STATION,
    BOARDING,
    DEPARTING_STATION,
    DEPARTED_STATION,
    TERMINATED,
    CANCELLED
  }

}

}
