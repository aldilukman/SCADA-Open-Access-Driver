/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class PaSource : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PaSource(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PaSource obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PaSource() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_PaSource(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public PaSource() : this(netspireSDKPINVOKE.new_PaSource__SWIG_0(), true) {
  }

  public PaSource(PaSource paSourceAnother) : this(netspireSDKPINVOKE.new_PaSource__SWIG_1(PaSource.getCPtr(paSourceAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public int id {
    set {
      netspireSDKPINVOKE.PaSource_id_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSource_id_get(swigCPtr);
      return ret;
    } 
  }

  public string location {
    set {
      netspireSDKPINVOKE.PaSource_location_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSource_location_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string label {
    set {
      netspireSDKPINVOKE.PaSource_label_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSource_label_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string ipAddress {
    set {
      netspireSDKPINVOKE.PaSource_ipAddress_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSource_ipAddress_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PaSource.Type type {
    set {
      netspireSDKPINVOKE.PaSource_type_set(swigCPtr, (int)value);
    } 
    get {
      PaSource.Type ret = (PaSource.Type)netspireSDKPINVOKE.PaSource_type_get(swigCPtr);
      return ret;
    } 
  }

  public string subAddress {
    set {
      netspireSDKPINVOKE.PaSource_subAddress_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSource_subAddress_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PaSource.AttachState state {
    set {
      netspireSDKPINVOKE.PaSource_state_set(swigCPtr, (int)value);
    } 
    get {
      PaSource.AttachState ret = (PaSource.AttachState)netspireSDKPINVOKE.PaSource_state_get(swigCPtr);
      return ret;
    } 
  }

  public bool isEnabled {
    set {
      netspireSDKPINVOKE.PaSource_isEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.PaSource_isEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public double inputGain {
    set {
      netspireSDKPINVOKE.PaSource_inputGain_set(swigCPtr, value);
    } 
    get {
      double ret = netspireSDKPINVOKE.PaSource_inputGain_get(swigCPtr);
      return ret;
    } 
  }

  public PaSource.BroadcastType broadcastType {
    set {
      netspireSDKPINVOKE.PaSource_broadcastType_set(swigCPtr, (int)value);
    } 
    get {
      PaSource.BroadcastType ret = (PaSource.BroadcastType)netspireSDKPINVOKE.PaSource_broadcastType_get(swigCPtr);
      return ret;
    } 
  }

  public PaSource.HealthState healthState {
    set {
      netspireSDKPINVOKE.PaSource_healthState_set(swigCPtr, (int)value);
    } 
    get {
      PaSource.HealthState ret = (PaSource.HealthState)netspireSDKPINVOKE.PaSource_healthState_get(swigCPtr);
      return ret;
    } 
  }

  public int targetGainAdjustment {
    set {
      netspireSDKPINVOKE.PaSource_targetGainAdjustment_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSource_targetGainAdjustment_get(swigCPtr);
      return ret;
    } 
  }

  public int priority {
    set {
      netspireSDKPINVOKE.PaSource_priority_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSource_priority_get(swigCPtr);
      return ret;
    } 
  }

  public void setGain(double gain, bool persistent, bool delayPersistence) {
    netspireSDKPINVOKE.PaSource_setGain__SWIG_0(swigCPtr, gain, persistent, delayPersistence);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGain(double gain, bool persistent) {
    netspireSDKPINVOKE.PaSource_setGain__SWIG_1(swigCPtr, gain, persistent);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGain(double gain) {
    netspireSDKPINVOKE.PaSource_setGain__SWIG_2(swigCPtr, gain);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getGain() {
    double ret = netspireSDKPINVOKE.PaSource_getGain(swigCPtr);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void attachPaZone(string zoneId, PaSource.AttachMode mode) {
    netspireSDKPINVOKE.PaSource_attachPaZone(swigCPtr, zoneId, (int)mode);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void detachPaZone(string zoneId) {
    netspireSDKPINVOKE.PaSource_detachPaZone(swigCPtr, zoneId);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void detachAllPaZones() {
    netspireSDKPINVOKE.PaSource_detachAllPaZones(swigCPtr);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringArray getAttachedPaZones() {
    StringArray ret = new StringArray(netspireSDKPINVOKE.PaSource_getAttachedPaZones(swigCPtr), true);
    return ret;
  }

  public PaSource.AttachState getAttachState() {
    PaSource.AttachState ret = (PaSource.AttachState)netspireSDKPINVOKE.PaSource_getAttachState(swigCPtr);
    return ret;
  }

  public enum Type {
    SOURCE_TYPE_NOT_DEFINED = 0,
    NETSPIRE_ANALOG_INPUT,
    NETSPIRE_IP_PAGING_STATION,
    PC_AUDIO_INPUT,
    NETSPIRE_HANDSET,
    SIP_HANDSET,
    TRAIN_RADIO,
    EWIS,
    BGM_SERVER
  }

  public enum AttachState {
    UNKNOWN = 0,
    NOT_ATTACHED,
    ATTACHED
  }

  public enum BroadcastType {
    MULTICAST_AND_UNICAST = 0,
    UNICAST_ONLY
  }

  public enum HealthState {
    UNKNOWN_HEALTHSTATE = 0,
    HEALTHY,
    FAULTY
  }

  public enum AttachMode {
    ADD_TO_EXISTING_SET = 0,
    REPLACE_EXISTING_SET
  }

}

}
