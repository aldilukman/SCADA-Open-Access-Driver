/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class PlatformInfo : NamedId {
  private HandleRef swigCPtr;

  internal PlatformInfo(IntPtr cPtr, bool cMemoryOwn) : base(netspireSDKPINVOKE.PlatformInfo_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PlatformInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PlatformInfo() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_PlatformInfo(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PlatformInfo() : this(netspireSDKPINVOKE.new_PlatformInfo__SWIG_0(), true) {
  }

  public PlatformInfo(int id) : this(netspireSDKPINVOKE.new_PlatformInfo__SWIG_1(id), true) {
  }

  public void setStationId(int stationId) {
    netspireSDKPINVOKE.PlatformInfo_setStationId(swigCPtr, stationId);
  }

  public int getStationId() {
    int ret = netspireSDKPINVOKE.PlatformInfo_getStationId(swigCPtr);
    return ret;
  }

  public void setLocation(string location) {
    netspireSDKPINVOKE.PlatformInfo_setLocation(swigCPtr, location);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getLocation() {
    string ret = netspireSDKPINVOKE.PlatformInfo_getLocation(swigCPtr);
    return ret;
  }

  public void setState(PlatformInfo.State state) {
    netspireSDKPINVOKE.PlatformInfo_setState(swigCPtr, (int)state);
  }

  public PlatformInfo.State getState() {
    PlatformInfo.State ret = (PlatformInfo.State)netspireSDKPINVOKE.PlatformInfo_getState(swigCPtr);
    return ret;
  }

  public void setStateText(string stateText) {
    netspireSDKPINVOKE.PlatformInfo_setStateText(swigCPtr, stateText);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getStateText() {
    string ret = netspireSDKPINVOKE.PlatformInfo_getStateText(swigCPtr);
    return ret;
  }

  public void setPassersListAsString(string passersListAsString) {
    netspireSDKPINVOKE.PlatformInfo_setPassersListAsString(swigCPtr, passersListAsString);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPassers(SWIGTYPE_p_std__listT_ServiceStop_t serviceStops) {
    netspireSDKPINVOKE.PlatformInfo_setPassers__SWIG_0(swigCPtr, SWIGTYPE_p_std__listT_ServiceStop_t.getCPtr(serviceStops));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPassers(SWIGTYPE_p_std__listT_Service_t services) {
    netspireSDKPINVOKE.PlatformInfo_setPassers__SWIG_1(swigCPtr, SWIGTYPE_p_std__listT_Service_t.getCPtr(services));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getPassersListAsString() {
    string ret = netspireSDKPINVOKE.PlatformInfo_getPassersListAsString(swigCPtr);
    return ret;
  }

  public ServiceStopList getPassers() {
    ServiceStopList ret = new ServiceStopList(netspireSDKPINVOKE.PlatformInfo_getPassers(swigCPtr), true);
    return ret;
  }

  public enum State {
    NO_VEHICLE_SCHEDULED,
    VEHICLE_APPROACHING,
    VEHICLE_ON_PLATFORM,
    VEHICLE_DOES_NOT_STOP,
    VEHICLE_TERMINATED,
    VEHICLE_BOARDING,
    VEHICLE_DEPARTING,
    VEHICLE_DEPARTED
  }

}

}
