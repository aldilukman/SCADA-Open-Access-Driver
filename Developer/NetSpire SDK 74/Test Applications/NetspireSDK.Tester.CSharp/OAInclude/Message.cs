/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class Message : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Message(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Message obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Message() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_Message(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Message() : this(netspireSDKPINVOKE.new_Message__SWIG_0(), true) {
  }

  public Message(Message messageAnother) : this(netspireSDKPINVOKE.new_Message__SWIG_1(Message.getCPtr(messageAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setRequestID(string id) {
    netspireSDKPINVOKE.Message_setRequestID(swigCPtr, id);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getRequestID() {
    string ret = netspireSDKPINVOKE.Message_getRequestID(swigCPtr);
    return ret;
  }

  public void setPriority(MessagePriority priority) {
    netspireSDKPINVOKE.Message_setPriority(swigCPtr, MessagePriority.getCPtr(priority));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public MessagePriority getPriority() {
    MessagePriority ret = new MessagePriority(netspireSDKPINVOKE.Message_getPriority(swigCPtr), true);
    return ret;
  }

  public void setPreChime(int chime) {
    netspireSDKPINVOKE.Message_setPreChime(swigCPtr, chime);
  }

  public int getPreChime() {
    int ret = netspireSDKPINVOKE.Message_getPreChime(swigCPtr);
    return ret;
  }

  public void setPostChime(int chime) {
    netspireSDKPINVOKE.Message_setPostChime(swigCPtr, chime);
  }

  public int getPostChime() {
    int ret = netspireSDKPINVOKE.Message_getPostChime(swigCPtr);
    return ret;
  }

  public void setGain(double gain) {
    netspireSDKPINVOKE.Message_setGain(swigCPtr, gain);
  }

  public double getGain() {
    double ret = netspireSDKPINVOKE.Message_getGain(swigCPtr);
    return ret;
  }

  public bool getOverrideDefaultGain() {
    bool ret = netspireSDKPINVOKE.Message_getOverrideDefaultGain(swigCPtr);
    return ret;
  }

  public void setAudioMessageType(Message.Type type) {
    netspireSDKPINVOKE.Message_setAudioMessageType(swigCPtr, (int)type);
  }

  public Message.Type getAudioMessageType() {
    Message.Type ret = (Message.Type)netspireSDKPINVOKE.Message_getAudioMessageType(swigCPtr);
    return ret;
  }

  public void setVisualMessageType(Message.Type type) {
    netspireSDKPINVOKE.Message_setVisualMessageType(swigCPtr, (int)type);
  }

  public Message.Type getVisualMessageType() {
    Message.Type ret = (Message.Type)netspireSDKPINVOKE.Message_getVisualMessageType(swigCPtr);
    return ret;
  }

  public void setAudioMessage(NumberArray dictionaryItems) {
    netspireSDKPINVOKE.Message_setAudioMessage__SWIG_0(swigCPtr, NumberArray.getCPtr(dictionaryItems));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public NumberArray getAudioMessageDictionaryItems() {
    NumberArray ret = new NumberArray(netspireSDKPINVOKE.Message_getAudioMessageDictionaryItems(swigCPtr), true);
    return ret;
  }

  public void setAudioMessage(string text, string language, string voice, Message.TextEncoding encoding) {
    netspireSDKPINVOKE.Message_setAudioMessage__SWIG_1(swigCPtr, text, language, voice, (int)encoding);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAudioMessage(string text, string language, string voice) {
    netspireSDKPINVOKE.Message_setAudioMessage__SWIG_2(swigCPtr, text, language, voice);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAudioMessage(TTSVocalizerArray ttsList) {
    netspireSDKPINVOKE.Message_setAudioMessage__SWIG_3(swigCPtr, TTSVocalizerArray.getCPtr(ttsList));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getAudioMessageTTSText() {
    string ret = netspireSDKPINVOKE.Message_getAudioMessageTTSText(swigCPtr);
    return ret;
  }

  public string getAudioMessageTTSLanguage() {
    string ret = netspireSDKPINVOKE.Message_getAudioMessageTTSLanguage(swigCPtr);
    return ret;
  }

  public string getAudioMessageTTSVoice() {
    string ret = netspireSDKPINVOKE.Message_getAudioMessageTTSVoice(swigCPtr);
    return ret;
  }

  public Message.TextEncoding getAudioMessageTTSEncoding() {
    Message.TextEncoding ret = (Message.TextEncoding)netspireSDKPINVOKE.Message_getAudioMessageTTSEncoding(swigCPtr);
    return ret;
  }

  public void setAudioMessage(string absolutePathWithFileName) {
    netspireSDKPINVOKE.Message_setAudioMessage__SWIG_4(swigCPtr, absolutePathWithFileName);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getAudioMessageAbsoluteFilePath() {
    string ret = netspireSDKPINVOKE.Message_getAudioMessageAbsoluteFilePath(swigCPtr);
    return ret;
  }

  public int getAudioMessageTTSRate() {
    int ret = netspireSDKPINVOKE.Message_getAudioMessageTTSRate(swigCPtr);
    return ret;
  }

  public void setAudioMessage(string templateName, KeyValueMap arguments) {
    netspireSDKPINVOKE.Message_setAudioMessage__SWIG_5(swigCPtr, templateName, KeyValueMap.getCPtr(arguments));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVisualMessage(NumberArray dictionaryItems) {
    netspireSDKPINVOKE.Message_setVisualMessage__SWIG_0(swigCPtr, NumberArray.getCPtr(dictionaryItems));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public NumberArray getVisualMessageDictionaryItems() {
    NumberArray ret = new NumberArray(netspireSDKPINVOKE.Message_getVisualMessageDictionaryItems(swigCPtr), true);
    return ret;
  }

  public void setVisualMessage(string text) {
    netspireSDKPINVOKE.Message_setVisualMessage__SWIG_1(swigCPtr, text);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getVisualMessageText() {
    string ret = netspireSDKPINVOKE.Message_getVisualMessageText(swigCPtr);
    return ret;
  }

  public void setVisualMessage(string _templateName, DisplayVariableValueMap _keyValueList, int validity) {
    netspireSDKPINVOKE.Message_setVisualMessage__SWIG_2(swigCPtr, _templateName, DisplayVariableValueMap.getCPtr(_keyValueList), validity);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVisualMessage(string _templateName, DisplayVariableValueMap _keyValueList) {
    netspireSDKPINVOKE.Message_setVisualMessage__SWIG_3(swigCPtr, _templateName, DisplayVariableValueMap.getCPtr(_keyValueList));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string playAnnouncement(StringArray zones) {
    string ret = netspireSDKPINVOKE.Message_playAnnouncement(swigCPtr, StringArray.getCPtr(zones));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string retrieveAudioMessage() {
    string ret = netspireSDKPINVOKE.Message_retrieveAudioMessage(swigCPtr);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRepeatCnt(int arg0) {
    netspireSDKPINVOKE.Message_setRepeatCnt(swigCPtr, arg0);
  }

  public int getRepeatCnt() {
    int ret = netspireSDKPINVOKE.Message_getRepeatCnt(swigCPtr);
    return ret;
  }

  public enum Type {
    LIVE_STREAM = 0,
    RECORDED_STREAM = 1,
    DICTIONARY = 2,
    DISPLAY = 3,
    TTS = 4,
    BGM = 5,
    MIXED = 6,
    NONE = 7,
    TEMPLATE = 8,
    DISPLAY_TEMPLATE = 9,
    TTS_SAF = 10,
    RECORDED_STREAM_SAF = 11
  }

  public enum TextEncoding {
    ISO_8859_1 = 0,
    UTF_8
  }

}

}
