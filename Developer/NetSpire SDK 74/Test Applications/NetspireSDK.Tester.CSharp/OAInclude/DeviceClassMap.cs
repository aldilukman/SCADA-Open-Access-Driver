/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class DeviceClassMap : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DeviceClassMap(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DeviceClassMap obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DeviceClassMap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_DeviceClassMap(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public DeviceClassMap() : this(netspireSDKPINVOKE.new_DeviceClassMap__SWIG_0(), true) {
  }

  public DeviceClassMap(SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t other) : this(netspireSDKPINVOKE.new_DeviceClassMap__SWIG_1(SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t.getCPtr(other)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  private SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__size_type size() {
    SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__size_type ret = new SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__size_type(netspireSDKPINVOKE.DeviceClassMap_size(swigCPtr), true);
    return ret;
  }

  public bool empty() {
    bool ret = netspireSDKPINVOKE.DeviceClassMap_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    netspireSDKPINVOKE.DeviceClassMap_Clear(swigCPtr);
  }

  private SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__mapped_type getitem(SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type key) {
    SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__mapped_type ret = new SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__mapped_type(netspireSDKPINVOKE.DeviceClassMap_getitem(swigCPtr, SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type.getCPtr(key)), false);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type key, SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__mapped_type x) {
    netspireSDKPINVOKE.DeviceClassMap_setitem(swigCPtr, SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type.getCPtr(key), SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__mapped_type.getCPtr(x));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ContainsKey(SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type key) {
    bool ret = netspireSDKPINVOKE.DeviceClassMap_ContainsKey(swigCPtr, SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type.getCPtr(key));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type key, SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__mapped_type val) {
    netspireSDKPINVOKE.DeviceClassMap_Add(swigCPtr, SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type.getCPtr(key), SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__mapped_type.getCPtr(val));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type key) {
    bool ret = netspireSDKPINVOKE.DeviceClassMap_Remove(swigCPtr, SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type.getCPtr(key));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private IntPtr create_iterator_begin() {
    IntPtr ret = netspireSDKPINVOKE.DeviceClassMap_create_iterator_begin(swigCPtr);
    return ret;
  }

  private SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type get_next_key(IntPtr swigiterator) {
    SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type ret = new SWIGTYPE_p_std__mapT_std__string_Device__DeviceClass_std__lessT_std__string_t_t__key_type(netspireSDKPINVOKE.DeviceClassMap_get_next_key(swigCPtr, swigiterator), false);
    return ret;
  }

  private void destroy_iterator(IntPtr swigiterator) {
    netspireSDKPINVOKE.DeviceClassMap_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
