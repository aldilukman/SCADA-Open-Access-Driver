/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class PassengerInformationObserver : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PassengerInformationObserver(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PassengerInformationObserver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PassengerInformationObserver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_PassengerInformationObserver(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void onServerStatusUpdated(bool status) {
    if (SwigDerivedClassHasMethod("onServerStatusUpdated", swigMethodTypes0)) netspireSDKPINVOKE.PassengerInformationObserver_onServerStatusUpdatedSwigExplicitPassengerInformationObserver(swigCPtr, status); else netspireSDKPINVOKE.PassengerInformationObserver_onServerStatusUpdated(swigCPtr, status);
  }

  public virtual void onLineUpdated(NamedId line) {
    if (SwigDerivedClassHasMethod("onLineUpdated", swigMethodTypes1)) netspireSDKPINVOKE.PassengerInformationObserver_onLineUpdatedSwigExplicitPassengerInformationObserver(swigCPtr, NamedId.getCPtr(line)); else netspireSDKPINVOKE.PassengerInformationObserver_onLineUpdated(swigCPtr, NamedId.getCPtr(line));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onLineRemoved(NamedId line) {
    if (SwigDerivedClassHasMethod("onLineRemoved", swigMethodTypes2)) netspireSDKPINVOKE.PassengerInformationObserver_onLineRemovedSwigExplicitPassengerInformationObserver(swigCPtr, NamedId.getCPtr(line)); else netspireSDKPINVOKE.PassengerInformationObserver_onLineRemoved(swigCPtr, NamedId.getCPtr(line));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onVehicleUpdated(Vehicle vehicle) {
    if (SwigDerivedClassHasMethod("onVehicleUpdated", swigMethodTypes3)) netspireSDKPINVOKE.PassengerInformationObserver_onVehicleUpdatedSwigExplicitPassengerInformationObserver(swigCPtr, Vehicle.getCPtr(vehicle)); else netspireSDKPINVOKE.PassengerInformationObserver_onVehicleUpdated(swigCPtr, Vehicle.getCPtr(vehicle));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onVehicleRemoved(Vehicle vehicle) {
    if (SwigDerivedClassHasMethod("onVehicleRemoved", swigMethodTypes4)) netspireSDKPINVOKE.PassengerInformationObserver_onVehicleRemovedSwigExplicitPassengerInformationObserver(swigCPtr, Vehicle.getCPtr(vehicle)); else netspireSDKPINVOKE.PassengerInformationObserver_onVehicleRemoved(swigCPtr, Vehicle.getCPtr(vehicle));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onStationUpdated(Station station) {
    if (SwigDerivedClassHasMethod("onStationUpdated", swigMethodTypes5)) netspireSDKPINVOKE.PassengerInformationObserver_onStationUpdatedSwigExplicitPassengerInformationObserver(swigCPtr, Station.getCPtr(station)); else netspireSDKPINVOKE.PassengerInformationObserver_onStationUpdated(swigCPtr, Station.getCPtr(station));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onStationRemoved(Station station) {
    if (SwigDerivedClassHasMethod("onStationRemoved", swigMethodTypes6)) netspireSDKPINVOKE.PassengerInformationObserver_onStationRemovedSwigExplicitPassengerInformationObserver(swigCPtr, Station.getCPtr(station)); else netspireSDKPINVOKE.PassengerInformationObserver_onStationRemoved(swigCPtr, Station.getCPtr(station));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onPlatformInfoUpdated(PlatformInfo platforminfo) {
    if (SwigDerivedClassHasMethod("onPlatformInfoUpdated", swigMethodTypes7)) netspireSDKPINVOKE.PassengerInformationObserver_onPlatformInfoUpdatedSwigExplicitPassengerInformationObserver(swigCPtr, PlatformInfo.getCPtr(platforminfo)); else netspireSDKPINVOKE.PassengerInformationObserver_onPlatformInfoUpdated(swigCPtr, PlatformInfo.getCPtr(platforminfo));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onPlatformInfoRemoved(PlatformInfo platforminfo) {
    if (SwigDerivedClassHasMethod("onPlatformInfoRemoved", swigMethodTypes8)) netspireSDKPINVOKE.PassengerInformationObserver_onPlatformInfoRemovedSwigExplicitPassengerInformationObserver(swigCPtr, PlatformInfo.getCPtr(platforminfo)); else netspireSDKPINVOKE.PassengerInformationObserver_onPlatformInfoRemoved(swigCPtr, PlatformInfo.getCPtr(platforminfo));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onServiceUpdated(Service service) {
    if (SwigDerivedClassHasMethod("onServiceUpdated", swigMethodTypes9)) netspireSDKPINVOKE.PassengerInformationObserver_onServiceUpdatedSwigExplicitPassengerInformationObserver(swigCPtr, Service.getCPtr(service)); else netspireSDKPINVOKE.PassengerInformationObserver_onServiceUpdated(swigCPtr, Service.getCPtr(service));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onServiceRemoved(Service service) {
    if (SwigDerivedClassHasMethod("onServiceRemoved", swigMethodTypes10)) netspireSDKPINVOKE.PassengerInformationObserver_onServiceRemovedSwigExplicitPassengerInformationObserver(swigCPtr, Service.getCPtr(service)); else netspireSDKPINVOKE.PassengerInformationObserver_onServiceRemoved(swigCPtr, Service.getCPtr(service));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onTripUpdated(Trip trip) {
    if (SwigDerivedClassHasMethod("onTripUpdated", swigMethodTypes11)) netspireSDKPINVOKE.PassengerInformationObserver_onTripUpdatedSwigExplicitPassengerInformationObserver(swigCPtr, Trip.getCPtr(trip)); else netspireSDKPINVOKE.PassengerInformationObserver_onTripUpdated(swigCPtr, Trip.getCPtr(trip));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onTripRemoved(Trip trip) {
    if (SwigDerivedClassHasMethod("onTripRemoved", swigMethodTypes12)) netspireSDKPINVOKE.PassengerInformationObserver_onTripRemovedSwigExplicitPassengerInformationObserver(swigCPtr, Trip.getCPtr(trip)); else netspireSDKPINVOKE.PassengerInformationObserver_onTripRemoved(swigCPtr, Trip.getCPtr(trip));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public PassengerInformationObserver() : this(netspireSDKPINVOKE.new_PassengerInformationObserver(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onServerStatusUpdated", swigMethodTypes0))
      swigDelegate0 = new SwigDelegatePassengerInformationObserver_0(SwigDirectoronServerStatusUpdated);
    if (SwigDerivedClassHasMethod("onLineUpdated", swigMethodTypes1))
      swigDelegate1 = new SwigDelegatePassengerInformationObserver_1(SwigDirectoronLineUpdated);
    if (SwigDerivedClassHasMethod("onLineRemoved", swigMethodTypes2))
      swigDelegate2 = new SwigDelegatePassengerInformationObserver_2(SwigDirectoronLineRemoved);
    if (SwigDerivedClassHasMethod("onVehicleUpdated", swigMethodTypes3))
      swigDelegate3 = new SwigDelegatePassengerInformationObserver_3(SwigDirectoronVehicleUpdated);
    if (SwigDerivedClassHasMethod("onVehicleRemoved", swigMethodTypes4))
      swigDelegate4 = new SwigDelegatePassengerInformationObserver_4(SwigDirectoronVehicleRemoved);
    if (SwigDerivedClassHasMethod("onStationUpdated", swigMethodTypes5))
      swigDelegate5 = new SwigDelegatePassengerInformationObserver_5(SwigDirectoronStationUpdated);
    if (SwigDerivedClassHasMethod("onStationRemoved", swigMethodTypes6))
      swigDelegate6 = new SwigDelegatePassengerInformationObserver_6(SwigDirectoronStationRemoved);
    if (SwigDerivedClassHasMethod("onPlatformInfoUpdated", swigMethodTypes7))
      swigDelegate7 = new SwigDelegatePassengerInformationObserver_7(SwigDirectoronPlatformInfoUpdated);
    if (SwigDerivedClassHasMethod("onPlatformInfoRemoved", swigMethodTypes8))
      swigDelegate8 = new SwigDelegatePassengerInformationObserver_8(SwigDirectoronPlatformInfoRemoved);
    if (SwigDerivedClassHasMethod("onServiceUpdated", swigMethodTypes9))
      swigDelegate9 = new SwigDelegatePassengerInformationObserver_9(SwigDirectoronServiceUpdated);
    if (SwigDerivedClassHasMethod("onServiceRemoved", swigMethodTypes10))
      swigDelegate10 = new SwigDelegatePassengerInformationObserver_10(SwigDirectoronServiceRemoved);
    if (SwigDerivedClassHasMethod("onTripUpdated", swigMethodTypes11))
      swigDelegate11 = new SwigDelegatePassengerInformationObserver_11(SwigDirectoronTripUpdated);
    if (SwigDerivedClassHasMethod("onTripRemoved", swigMethodTypes12))
      swigDelegate12 = new SwigDelegatePassengerInformationObserver_12(SwigDirectoronTripRemoved);
    netspireSDKPINVOKE.PassengerInformationObserver_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(PassengerInformationObserver));
    return hasDerivedMethod;
  }

  private void SwigDirectoronServerStatusUpdated(bool status) {
    onServerStatusUpdated(status);
  }

  private void SwigDirectoronLineUpdated(IntPtr line) {
    onLineUpdated(new NamedId(line, false));
  }

  private void SwigDirectoronLineRemoved(IntPtr line) {
    onLineRemoved(new NamedId(line, false));
  }

  private void SwigDirectoronVehicleUpdated(IntPtr vehicle) {
    onVehicleUpdated(new Vehicle(vehicle, false));
  }

  private void SwigDirectoronVehicleRemoved(IntPtr vehicle) {
    onVehicleRemoved(new Vehicle(vehicle, false));
  }

  private void SwigDirectoronStationUpdated(IntPtr station) {
    onStationUpdated(new Station(station, false));
  }

  private void SwigDirectoronStationRemoved(IntPtr station) {
    onStationRemoved(new Station(station, false));
  }

  private void SwigDirectoronPlatformInfoUpdated(IntPtr platforminfo) {
    onPlatformInfoUpdated(new PlatformInfo(platforminfo, false));
  }

  private void SwigDirectoronPlatformInfoRemoved(IntPtr platforminfo) {
    onPlatformInfoRemoved(new PlatformInfo(platforminfo, false));
  }

  private void SwigDirectoronServiceUpdated(IntPtr service) {
    onServiceUpdated(new Service(service, false));
  }

  private void SwigDirectoronServiceRemoved(IntPtr service) {
    onServiceRemoved(new Service(service, false));
  }

  private void SwigDirectoronTripUpdated(IntPtr trip) {
    onTripUpdated(new Trip(trip, false));
  }

  private void SwigDirectoronTripRemoved(IntPtr trip) {
    onTripRemoved(new Trip(trip, false));
  }

  public delegate void SwigDelegatePassengerInformationObserver_0(bool status);
  public delegate void SwigDelegatePassengerInformationObserver_1(IntPtr line);
  public delegate void SwigDelegatePassengerInformationObserver_2(IntPtr line);
  public delegate void SwigDelegatePassengerInformationObserver_3(IntPtr vehicle);
  public delegate void SwigDelegatePassengerInformationObserver_4(IntPtr vehicle);
  public delegate void SwigDelegatePassengerInformationObserver_5(IntPtr station);
  public delegate void SwigDelegatePassengerInformationObserver_6(IntPtr station);
  public delegate void SwigDelegatePassengerInformationObserver_7(IntPtr platforminfo);
  public delegate void SwigDelegatePassengerInformationObserver_8(IntPtr platforminfo);
  public delegate void SwigDelegatePassengerInformationObserver_9(IntPtr service);
  public delegate void SwigDelegatePassengerInformationObserver_10(IntPtr service);
  public delegate void SwigDelegatePassengerInformationObserver_11(IntPtr trip);
  public delegate void SwigDelegatePassengerInformationObserver_12(IntPtr trip);

  private SwigDelegatePassengerInformationObserver_0 swigDelegate0;
  private SwigDelegatePassengerInformationObserver_1 swigDelegate1;
  private SwigDelegatePassengerInformationObserver_2 swigDelegate2;
  private SwigDelegatePassengerInformationObserver_3 swigDelegate3;
  private SwigDelegatePassengerInformationObserver_4 swigDelegate4;
  private SwigDelegatePassengerInformationObserver_5 swigDelegate5;
  private SwigDelegatePassengerInformationObserver_6 swigDelegate6;
  private SwigDelegatePassengerInformationObserver_7 swigDelegate7;
  private SwigDelegatePassengerInformationObserver_8 swigDelegate8;
  private SwigDelegatePassengerInformationObserver_9 swigDelegate9;
  private SwigDelegatePassengerInformationObserver_10 swigDelegate10;
  private SwigDelegatePassengerInformationObserver_11 swigDelegate11;
  private SwigDelegatePassengerInformationObserver_12 swigDelegate12;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(bool) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(NamedId) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(NamedId) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(Vehicle) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(Vehicle) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(Station) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(Station) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(PlatformInfo) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(PlatformInfo) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(Service) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(Service) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(Trip) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(Trip) };
}

}
