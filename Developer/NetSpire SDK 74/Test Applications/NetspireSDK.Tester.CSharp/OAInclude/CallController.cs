/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class CallController : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CallController(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CallController obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CallController() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_CallController(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public CallController() : this(netspireSDKPINVOKE.new_CallController(), true) {
  }

  public void createDestination(StringArray bPartyExtList, string CLI, string deviceID) {
    netspireSDKPINVOKE.CallController_createDestination(swigCPtr, StringArray.getCPtr(bPartyExtList), CLI, deviceID);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resetDestinationMap(string deviceID) {
    netspireSDKPINVOKE.CallController_resetDestinationMap(swigCPtr, deviceID);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public int createCall(string aPartyCLI, string bPartyCLI) {
    int ret = netspireSDKPINVOKE.CallController_createCall(swigCPtr, aPartyCLI, bPartyCLI);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void answerCallOnTerminal(int callReference, string bPartyCLI, string aPartyCLI) {
    netspireSDKPINVOKE.CallController_answerCallOnTerminal(swigCPtr, callReference, bPartyCLI, aPartyCLI);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resumeCall(int callReference, string bPartyCLI) {
    netspireSDKPINVOKE.CallController_resumeCall(swigCPtr, callReference, bPartyCLI);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void resumeCallOnTerminal(int callReference, string bPartyCLI, string aPartyCLI) {
    netspireSDKPINVOKE.CallController_resumeCallOnTerminal(swigCPtr, callReference, bPartyCLI, aPartyCLI);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void transferCall(int callReference, string bPartyCLI) {
    netspireSDKPINVOKE.CallController_transferCall(swigCPtr, callReference, bPartyCLI);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void holdCall(int callReference, string bPartyCLI) {
    netspireSDKPINVOKE.CallController_holdCall(swigCPtr, callReference, bPartyCLI);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void terminateCall(int callReference, string callConnection) {
    netspireSDKPINVOKE.CallController_terminateCall__SWIG_0(swigCPtr, callReference, callConnection);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void terminateCall(int callReference, int cleardownCauseCode) {
    netspireSDKPINVOKE.CallController_terminateCall__SWIG_1(swigCPtr, callReference, cleardownCauseCode);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public CallInfoArray getCalls() {
    CallInfoArray ret = new CallInfoArray(netspireSDKPINVOKE.CallController_getCalls(swigCPtr), true);
    return ret;
  }

  public CDRInfoArray getCDRMessages() {
    CDRInfoArray ret = new CDRInfoArray(netspireSDKPINVOKE.CallController_getCDRMessages(swigCPtr), true);
    return ret;
  }

  public TerminalInfoArray getTerminalList() {
    TerminalInfoArray ret = new TerminalInfoArray(netspireSDKPINVOKE.CallController_getTerminalList(swigCPtr), true);
    return ret;
  }

  public void registerObserver(CallControllerObserver callObserver) {
    netspireSDKPINVOKE.CallController_registerObserver(swigCPtr, CallControllerObserver.getCPtr(callObserver));
  }

  public SIPTrunkList getSIPTrunks() {
    SIPTrunkList ret = new SIPTrunkList(netspireSDKPINVOKE.CallController_getSIPTrunks(swigCPtr), true);
    return ret;
  }

  public ISDNTrunkList getISDNTrunks() {
    ISDNTrunkList ret = new ISDNTrunkList(netspireSDKPINVOKE.CallController_getISDNTrunks(swigCPtr), true);
    return ret;
  }

}

}
