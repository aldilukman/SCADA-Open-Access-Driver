/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class PaSelector : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PaSelector(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PaSelector obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PaSelector() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_PaSelector(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public PaSelector() : this(netspireSDKPINVOKE.new_PaSelector__SWIG_0(), true) {
  }

  public PaSelector(PaSelector paSelectorAnother) : this(netspireSDKPINVOKE.new_PaSelector__SWIG_1(PaSelector.getCPtr(paSelectorAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public int id {
    set {
      netspireSDKPINVOKE.PaSelector_id_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSelector_id_get(swigCPtr);
      return ret;
    } 
  }

  public int associatedSourceId {
    set {
      netspireSDKPINVOKE.PaSelector_associatedSourceId_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSelector_associatedSourceId_get(swigCPtr);
      return ret;
    } 
  }

  public string label {
    set {
      netspireSDKPINVOKE.PaSelector_label_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSelector_label_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PaSelector.Type type {
    set {
      netspireSDKPINVOKE.PaSelector_type_set(swigCPtr, (int)value);
    } 
    get {
      PaSelector.Type ret = (PaSelector.Type)netspireSDKPINVOKE.PaSelector_type_get(swigCPtr);
      return ret;
    } 
  }

  public string number {
    set {
      netspireSDKPINVOKE.PaSelector_number_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSelector_number_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PaSelector.Protection protection {
    set {
      netspireSDKPINVOKE.PaSelector_protection_set(swigCPtr, (int)value);
    } 
    get {
      PaSelector.Protection ret = (PaSelector.Protection)netspireSDKPINVOKE.PaSelector_protection_get(swigCPtr);
      return ret;
    } 
  }

  public PaSelector.Mode mode {
    set {
      netspireSDKPINVOKE.PaSelector_mode_set(swigCPtr, (int)value);
    } 
    get {
      PaSelector.Mode ret = (PaSelector.Mode)netspireSDKPINVOKE.PaSelector_mode_get(swigCPtr);
      return ret;
    } 
  }

  public PaSelector.DynamicRestriction dynamicRestriction {
    set {
      netspireSDKPINVOKE.PaSelector_dynamicRestriction_set(swigCPtr, (int)value);
    } 
    get {
      PaSelector.DynamicRestriction ret = (PaSelector.DynamicRestriction)netspireSDKPINVOKE.PaSelector_dynamicRestriction_get(swigCPtr);
      return ret;
    } 
  }

  public PaSelector.State state {
    set {
      netspireSDKPINVOKE.PaSelector_state_set(swigCPtr, (int)value);
    } 
    get {
      PaSelector.State ret = (PaSelector.State)netspireSDKPINVOKE.PaSelector_state_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_t paZoneList {
    set {
      netspireSDKPINVOKE.PaSelector_paZoneList_set(swigCPtr, SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_t.getCPtr(value));
    } 
    get {
      IntPtr cPtr = netspireSDKPINVOKE.PaSelector_paZoneList_get(swigCPtr);
      SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_t ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_int_std__string_std__lessT_int_t_t(cPtr, false);
      return ret;
    } 
  }

  public enum Type {
    SELECTOR_TYPE_UNDEFINED = 0,
    DIN_NORMALLY_OPEN,
    DIN_NORMALLY_CLOSED,
    KEYPAD_KEY,
    TOUCHPAD_REGION,
    TELEPHONY_INPUT,
    TELEPHONY_DID,
    USER_DEFINED
  }

  public enum Protection {
    FIXED_CONFIGURATION = 0,
    VOLATILE_SOFTWARE_CONFIGURABLE,
    NONVOLATILE_SOFTWARE_CONFIGURABLE
  }

  public enum Mode {
    ADD_TO_EXISTING_SET = 0,
    REPLACE_EXISTING_SET
  }

  public enum DynamicRestriction {
    UPDATES_NOT_ALLOWED = 0,
    ADD_SINKS_TO_SET_ALLOWED,
    ADD_REMOVE_SINKS_TO_SET_ALLOWED
  }

  public enum State {
    ENABLED_AND_UNKNOWN = 0,
    ENABLED_AND_INACTIVE,
    ENABLED_AND_ACTIVE,
    DISABLED
  }

}

}
