/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class PaTrigger : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PaTrigger(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PaTrigger obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PaTrigger() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_PaTrigger(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public PaTrigger() : this(netspireSDKPINVOKE.new_PaTrigger__SWIG_0(), true) {
  }

  public PaTrigger(PaTrigger paTriggerAnother) : this(netspireSDKPINVOKE.new_PaTrigger__SWIG_1(PaTrigger.getCPtr(paTriggerAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public int id {
    set {
      netspireSDKPINVOKE.PaTrigger_id_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaTrigger_id_get(swigCPtr);
      return ret;
    } 
  }

  public int associatedSourceId {
    set {
      netspireSDKPINVOKE.PaTrigger_associatedSourceId_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaTrigger_associatedSourceId_get(swigCPtr);
      return ret;
    } 
  }

  public int associatedSelectorId {
    set {
      netspireSDKPINVOKE.PaTrigger_associatedSelectorId_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaTrigger_associatedSelectorId_get(swigCPtr);
      return ret;
    } 
  }

  public string label {
    set {
      netspireSDKPINVOKE.PaTrigger_label_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaTrigger_label_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PaTrigger.Type type {
    set {
      netspireSDKPINVOKE.PaTrigger_type_set(swigCPtr, (int)value);
    } 
    get {
      PaTrigger.Type ret = (PaTrigger.Type)netspireSDKPINVOKE.PaTrigger_type_get(swigCPtr);
      return ret;
    } 
  }

  public string subAddress {
    set {
      netspireSDKPINVOKE.PaTrigger_subAddress_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaTrigger_subAddress_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int priority {
    set {
      netspireSDKPINVOKE.PaTrigger_priority_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaTrigger_priority_get(swigCPtr);
      return ret;
    } 
  }

  public PaTrigger.PRIORITY_MODE priorityMode {
    set {
      netspireSDKPINVOKE.PaTrigger_priorityMode_set(swigCPtr, (int)value);
    } 
    get {
      PaTrigger.PRIORITY_MODE ret = (PaTrigger.PRIORITY_MODE)netspireSDKPINVOKE.PaTrigger_priorityMode_get(swigCPtr);
      return ret;
    } 
  }

  public PaTrigger.State state {
    set {
      netspireSDKPINVOKE.PaTrigger_state_set(swigCPtr, (int)value);
    } 
    get {
      PaTrigger.State ret = (PaTrigger.State)netspireSDKPINVOKE.PaTrigger_state_get(swigCPtr);
      return ret;
    } 
  }

  public bool resumeAfterInterruption {
    set {
      netspireSDKPINVOKE.PaTrigger_resumeAfterInterruption_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.PaTrigger_resumeAfterInterruption_get(swigCPtr);
      return ret;
    } 
  }

  public enum Type {
    TRIGGER_TYPE_UNDEFINED = 0,
    DIN_NORMALLY_OPEN,
    DIN_NORMALLY_CLOSED,
    KEYPAD_KEY,
    VOX,
    STREAM_PRESENCE,
    TOUCHPAD_ZONE,
    INCOMING_TELEPHONY_CALL,
    MICROPHONE_CURRENT_SENSE,
    USER_CONDITIONAL
  }

  public enum State {
    UNKNOWN = 0,
    INACTIVE,
    ACTIVE
  }

  public enum PRIORITY_MODE {
    ABSOLUTE_PRIORITY = 0,
    RELATIVE_PRIORITY
  }

}

}
