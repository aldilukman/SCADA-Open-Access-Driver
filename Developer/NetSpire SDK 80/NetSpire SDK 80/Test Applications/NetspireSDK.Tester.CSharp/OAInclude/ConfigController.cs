/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class ConfigController : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ConfigController(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ConfigController obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ConfigController() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_ConfigController(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ConfigController() : this(netspireSDKPINVOKE.new_ConfigController(), true) {
  }

  public void updateEntryInCfgManager(string deviceId, string resId, string key, string value) {
    netspireSDKPINVOKE.ConfigController_updateEntryInCfgManager(swigCPtr, deviceId, resId, key, value);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteEntryInCfgManager(string deviceId, string resId, string key) {
    netspireSDKPINVOKE.ConfigController_deleteEntryInCfgManager(swigCPtr, deviceId, resId, key);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void commitChangesToCfgManager(string deviceId, string resId, string commitDescription) {
    netspireSDKPINVOKE.ConfigController_commitChangesToCfgManager(swigCPtr, deviceId, resId, commitDescription);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateUserData(int elemId, int key, string msgArgs) {
    netspireSDKPINVOKE.ConfigController_updateUserData(swigCPtr, elemId, key, msgArgs);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteUserData(int elemId, int key) {
    netspireSDKPINVOKE.ConfigController_deleteUserData(swigCPtr, elemId, key);
  }

  public void updateUserData1(int key, string msgArgs) {
    netspireSDKPINVOKE.ConfigController_updateUserData1(swigCPtr, key, msgArgs);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteUserData1(int key) {
    netspireSDKPINVOKE.ConfigController_deleteUserData1(swigCPtr, key);
  }

}

}
