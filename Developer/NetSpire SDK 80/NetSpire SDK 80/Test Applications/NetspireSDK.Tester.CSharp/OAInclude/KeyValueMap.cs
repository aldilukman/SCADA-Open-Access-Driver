/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class KeyValueMap : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal KeyValueMap(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(KeyValueMap obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~KeyValueMap() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_KeyValueMap(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public KeyValueMap() : this(netspireSDKPINVOKE.new_KeyValueMap(), true) {
  }

  public void set(string key, string value) {
    netspireSDKPINVOKE.KeyValueMap_set(swigCPtr, key, value);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public StringArray get_all_keys() {
    StringArray ret = new StringArray(netspireSDKPINVOKE.KeyValueMap_get_all_keys(swigCPtr), true);
    return ret;
  }

  public bool has_key(string key) {
    bool ret = netspireSDKPINVOKE.KeyValueMap_has_key(swigCPtr, key);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string get_value(string key) {
    string ret = netspireSDKPINVOKE.KeyValueMap_get_value(swigCPtr, key);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool erase(string key) {
    bool ret = netspireSDKPINVOKE.KeyValueMap_erase(swigCPtr, key);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool empty() {
    bool ret = netspireSDKPINVOKE.KeyValueMap_empty(swigCPtr);
    return ret;
  }

  public void clear() {
    netspireSDKPINVOKE.KeyValueMap_clear(swigCPtr);
  }

  public uint size() {
    uint ret = netspireSDKPINVOKE.KeyValueMap_size(swigCPtr);
    return ret;
  }

}

}
