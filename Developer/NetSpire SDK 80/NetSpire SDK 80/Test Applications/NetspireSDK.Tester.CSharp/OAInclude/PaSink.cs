/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class PaSink : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PaSink(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PaSink obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PaSink() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_PaSink(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public PaSink() : this(netspireSDKPINVOKE.new_PaSink__SWIG_0(), true) {
  }

  public PaSink(PaSink paSinkAnother) : this(netspireSDKPINVOKE.new_PaSink__SWIG_1(PaSink.getCPtr(paSinkAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public int id {
    set {
      netspireSDKPINVOKE.PaSink_id_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSink_id_get(swigCPtr);
      return ret;
    } 
  }

  public int vci_dciPort {
    set {
      netspireSDKPINVOKE.PaSink_vci_dciPort_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSink_vci_dciPort_get(swigCPtr);
      return ret;
    } 
  }

  public string location {
    set {
      netspireSDKPINVOKE.PaSink_location_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSink_location_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string label {
    set {
      netspireSDKPINVOKE.PaSink_label_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSink_label_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string ipAddress {
    set {
      netspireSDKPINVOKE.PaSink_ipAddress_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSink_ipAddress_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PaSink.Type type {
    set {
      netspireSDKPINVOKE.PaSink_type_set(swigCPtr, (int)value);
    } 
    get {
      PaSink.Type ret = (PaSink.Type)netspireSDKPINVOKE.PaSink_type_get(swigCPtr);
      return ret;
    } 
  }

  public string typeAsString {
    set {
      netspireSDKPINVOKE.PaSink_typeAsString_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSink_typeAsString_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string ampPortList {
    set {
      netspireSDKPINVOKE.PaSink_ampPortList_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSink_ampPortList_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PaSink.State state {
    set {
      netspireSDKPINVOKE.PaSink_state_set(swigCPtr, (int)value);
    } 
    get {
      PaSink.State ret = (PaSink.State)netspireSDKPINVOKE.PaSink_state_get(swigCPtr);
      return ret;
    } 
  }

  public PaSink.AnnouncementType announcementType {
    set {
      netspireSDKPINVOKE.PaSink_announcementType_set(swigCPtr, (int)value);
    } 
    get {
      PaSink.AnnouncementType ret = (PaSink.AnnouncementType)netspireSDKPINVOKE.PaSink_announcementType_get(swigCPtr);
      return ret;
    } 
  }

  public Gain outputGain {
    set {
      netspireSDKPINVOKE.PaSink_outputGain_set(swigCPtr, Gain.getCPtr(value));
    } 
    get {
      IntPtr cPtr = netspireSDKPINVOKE.PaSink_outputGain_get(swigCPtr);
      Gain ret = (cPtr == IntPtr.Zero) ? null : new Gain(cPtr, false);
      return ret;
    } 
  }

  public PaSink.MuteState muteState {
    set {
      netspireSDKPINVOKE.PaSink_muteState_set(swigCPtr, (int)value);
    } 
    get {
      PaSink.MuteState ret = (PaSink.MuteState)netspireSDKPINVOKE.PaSink_muteState_get(swigCPtr);
      return ret;
    } 
  }

  public int monitoringSinkId {
    set {
      netspireSDKPINVOKE.PaSink_monitoringSinkId_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSink_monitoringSinkId_get(swigCPtr);
      return ret;
    } 
  }

  public bool sinkHasDigitalRoute {
    set {
      netspireSDKPINVOKE.PaSink_sinkHasDigitalRoute_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.PaSink_sinkHasDigitalRoute_get(swigCPtr);
      return ret;
    } 
  }

  public int serverToUseSinkId {
    set {
      netspireSDKPINVOKE.PaSink_serverToUseSinkId_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSink_serverToUseSinkId_get(swigCPtr);
      return ret;
    } 
  }

  public int realDeviceDstNo {
    set {
      netspireSDKPINVOKE.PaSink_realDeviceDstNo_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSink_realDeviceDstNo_get(swigCPtr);
      return ret;
    } 
  }

  public PaSink.HealthState healthState {
    set {
      netspireSDKPINVOKE.PaSink_healthState_set(swigCPtr, (int)value);
    } 
    get {
      PaSink.HealthState ret = (PaSink.HealthState)netspireSDKPINVOKE.PaSink_healthState_get(swigCPtr);
      return ret;
    } 
  }

  public bool isEnabled {
    set {
      netspireSDKPINVOKE.PaSink_isEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.PaSink_isEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public string dspOutputChannelList {
    set {
      netspireSDKPINVOKE.PaSink_dspOutputChannelList_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSink_dspOutputChannelList_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int relayDstNo {
    set {
      netspireSDKPINVOKE.PaSink_relayDstNo_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.PaSink_relayDstNo_get(swigCPtr);
      return ret;
    } 
  }

  public PaSink.BroadcastType broadcastType {
    set {
      netspireSDKPINVOKE.PaSink_broadcastType_set(swigCPtr, (int)value);
    } 
    get {
      PaSink.BroadcastType ret = (PaSink.BroadcastType)netspireSDKPINVOKE.PaSink_broadcastType_get(swigCPtr);
      return ret;
    } 
  }

  public StringArray paZoneList {
    set {
      netspireSDKPINVOKE.PaSink_paZoneList_set(swigCPtr, StringArray.getCPtr(value));
    } 
    get {
      IntPtr cPtr = netspireSDKPINVOKE.PaSink_paZoneList_get(swigCPtr);
      StringArray ret = (cPtr == IntPtr.Zero) ? null : new StringArray(cPtr, false);
      return ret;
    } 
  }

  public StringArray monitoringZoneList {
    set {
      netspireSDKPINVOKE.PaSink_monitoringZoneList_set(swigCPtr, StringArray.getCPtr(value));
    } 
    get {
      IntPtr cPtr = netspireSDKPINVOKE.PaSink_monitoringZoneList_get(swigCPtr);
      StringArray ret = (cPtr == IntPtr.Zero) ? null : new StringArray(cPtr, false);
      return ret;
    } 
  }

  public bool monitoringEnabled {
    set {
      netspireSDKPINVOKE.PaSink_monitoringEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.PaSink_monitoringEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public string mediaLog {
    set {
      netspireSDKPINVOKE.PaSink_mediaLog_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.PaSink_mediaLog_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void setGain(Gain gain, bool persistent, bool delayPersistence) {
    netspireSDKPINVOKE.PaSink_setGain__SWIG_0(swigCPtr, Gain.getCPtr(gain), persistent, delayPersistence);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGain(Gain gain, bool persistent) {
    netspireSDKPINVOKE.PaSink_setGain__SWIG_1(swigCPtr, Gain.getCPtr(gain), persistent);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGain(Gain gain) {
    netspireSDKPINVOKE.PaSink_setGain__SWIG_2(swigCPtr, Gain.getCPtr(gain));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Gain getGain() {
    Gain ret = new Gain(netspireSDKPINVOKE.PaSink_getGain(swigCPtr), true);
    return ret;
  }

  public void setPAMonitoring(bool enable) {
    netspireSDKPINVOKE.PaSink_setPAMonitoring(swigCPtr, enable);
  }

  public bool getPAMonitoring() {
    bool ret = netspireSDKPINVOKE.PaSink_getPAMonitoring(swigCPtr);
    return ret;
  }

  public void reset() {
    netspireSDKPINVOKE.PaSink_reset(swigCPtr);
  }

  public enum Type {
    SINK_TYPE_NOT_DEFINED = 0,
    HIGH_IMPEDANCE_SPEAKER_BUS,
    LOW_IMPEDANCE_AMPLIFIER_SPEAKER_OUTPUT,
    INDUCTION_LOOP_OUTPUT,
    LINE_LEVEL_AUDIO_OUTPUT,
    INTERCOM_HELP_POINT,
    TELEPHONY_ENDPOINT,
    RADIO_REBROADCAST,
    PACI_CLIENT,
    NETSPIRE_DCI2,
    NETSPIRE_VCU4
  }

  public enum State {
    UNKNOWN = 0,
    IDLE,
    ACTIVE
  }

  public enum AnnouncementType {
    NO_ANNOUNCEMENT = 0,
    FILE_PLAY,
    LLPA_HIGH_QUALITY,
    LLPA_EMERGENCY,
    AUDIO_SWITCHING,
    VOIP_STREAMING
  }

  public enum HealthState {
    UNKNOWN_HEALTHSTATE = 0,
    HEALTHY,
    MINOR_FAULT,
    MAJOR_FAULT,
    INACTIVE
  }

  public enum BroadcastType {
    MULTICAST_AND_UNICAST = 0,
    UNICAST_ONLY
  }

  public enum MuteState {
    MUTED = 0,
    NOT_MUTED,
    PARTIALLY_MUTED
  }

}

}
