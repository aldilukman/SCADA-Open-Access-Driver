/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class PAController : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PAController(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PAController obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~PAController() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_PAController(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public PAController() : this(netspireSDKPINVOKE.new_PAController(), true) {
  }

  public PaSourceArray getPaSources() {
    PaSourceArray ret = new PaSourceArray(netspireSDKPINVOKE.PAController_getPaSources(swigCPtr), true);
    return ret;
  }

  public bool attachPaSource(int sourceId) {
    bool ret = netspireSDKPINVOKE.PAController_attachPaSource(swigCPtr, sourceId);
    return ret;
  }

  public void enablePaSourceVUMeter(int sourceId) {
    netspireSDKPINVOKE.PAController_enablePaSourceVUMeter(swigCPtr, sourceId);
  }

  public void disablePaSourceVUMeter(int sourceId) {
    netspireSDKPINVOKE.PAController_disablePaSourceVUMeter(swigCPtr, sourceId);
  }

  public bool detachPaSource(int sourceId) {
    bool ret = netspireSDKPINVOKE.PAController_detachPaSource(swigCPtr, sourceId);
    return ret;
  }

  public PaSinkArray getPaSinks(int sourceId) {
    PaSinkArray ret = new PaSinkArray(netspireSDKPINVOKE.PAController_getPaSinks__SWIG_0(swigCPtr, sourceId), true);
    return ret;
  }

  public PaSinkArray getPaSinks() {
    PaSinkArray ret = new PaSinkArray(netspireSDKPINVOKE.PAController_getPaSinks__SWIG_1(swigCPtr), true);
    return ret;
  }

  public PaZoneArray getPaZones() {
    PaZoneArray ret = new PaZoneArray(netspireSDKPINVOKE.PAController_getPaZones(swigCPtr), true);
    return ret;
  }

  public PaTriggerArray getHwPaTriggers(int sourceId) {
    PaTriggerArray ret = new PaTriggerArray(netspireSDKPINVOKE.PAController_getHwPaTriggers(swigCPtr, sourceId), true);
    return ret;
  }

  public PaTrigger.State getHwPaTriggerState(int triggerId) {
    PaTrigger.State ret = (PaTrigger.State)netspireSDKPINVOKE.PAController_getHwPaTriggerState(swigCPtr, triggerId);
    return ret;
  }

  public int createSwPaTrigger(int sourceId, int triggerPriority) {
    int ret = netspireSDKPINVOKE.PAController_createSwPaTrigger__SWIG_0(swigCPtr, sourceId, triggerPriority);
    return ret;
  }

  public int createSwPaTrigger(int sourceId, int triggerPriority, string preChime, string displayParameters) {
    int ret = netspireSDKPINVOKE.PAController_createSwPaTrigger__SWIG_1(swigCPtr, sourceId, triggerPriority, preChime, displayParameters);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void deleteSwPaTrigger(int triggerId) {
    netspireSDKPINVOKE.PAController_deleteSwPaTrigger(swigCPtr, triggerId);
  }

  public void activateSwPaTrigger(int triggerId) {
    netspireSDKPINVOKE.PAController_activateSwPaTrigger(swigCPtr, triggerId);
  }

  public void deactivateSwPaTrigger(int triggerId) {
    netspireSDKPINVOKE.PAController_deactivateSwPaTrigger(swigCPtr, triggerId);
  }

  public PaSelectorArray getPaSelectors(int sourceId) {
    PaSelectorArray ret = new PaSelectorArray(netspireSDKPINVOKE.PAController_getPaSelectors(swigCPtr, sourceId), true);
    return ret;
  }

  public PaSinkArray getPaSinksForSelector(int selectorId) {
    PaSinkArray ret = new PaSinkArray(netspireSDKPINVOKE.PAController_getPaSinksForSelector(swigCPtr, selectorId), true);
    return ret;
  }

  public void addPaSinkToSelector(int selectorId, int sinkId) {
    netspireSDKPINVOKE.PAController_addPaSinkToSelector(swigCPtr, selectorId, sinkId);
  }

  public void deletePaSinkFromSelector(int selectorId, int sinkId) {
    netspireSDKPINVOKE.PAController_deletePaSinkFromSelector(swigCPtr, selectorId, sinkId);
  }

  public void enablePaSelector(int selectorId) {
    netspireSDKPINVOKE.PAController_enablePaSelector(swigCPtr, selectorId);
  }

  public void disablePaSelector(int selectorId) {
    netspireSDKPINVOKE.PAController_disablePaSelector(swigCPtr, selectorId);
  }

  public PaSelector.State getPaSelectorState(int selectorId) {
    PaSelector.State ret = (PaSelector.State)netspireSDKPINVOKE.PAController_getPaSelectorState(swigCPtr, selectorId);
    return ret;
  }

  public void registerObserver(PAControllerObserver paObserver) {
    netspireSDKPINVOKE.PAController_registerObserver(swigCPtr, PAControllerObserver.getCPtr(paObserver));
  }

  public uint playMessage(StringArray zones, StringArray visualDevices, Gain gain, NumberArray dictionaryItems, string visualText, bool resumeOnInterruptFlag, bool overrideExisting, uint validityPeriod, uint priority, uint mode) {
    uint ret = netspireSDKPINVOKE.PAController_playMessage__SWIG_0(swigCPtr, StringArray.getCPtr(zones), StringArray.getCPtr(visualDevices), Gain.getCPtr(gain), NumberArray.getCPtr(dictionaryItems), visualText, resumeOnInterruptFlag, overrideExisting, validityPeriod, priority, mode);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint playMessage(StringArray zones, StringArray visualDevices, Gain gain, NumberArray dictionaryItems, string visualText, PlayMessageParams arg5) {
    uint ret = netspireSDKPINVOKE.PAController_playMessage__SWIG_1(swigCPtr, StringArray.getCPtr(zones), StringArray.getCPtr(visualDevices), Gain.getCPtr(gain), NumberArray.getCPtr(dictionaryItems), visualText, PlayMessageParams.getCPtr(arg5));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string playMessage(StringArray zones, Message message) {
    string ret = netspireSDKPINVOKE.PAController_playMessage__SWIG_2(swigCPtr, StringArray.getCPtr(zones), Message.getCPtr(message));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void cancelMessage(uint messageId) {
    netspireSDKPINVOKE.PAController_cancelMessage__SWIG_0(swigCPtr, messageId);
  }

  public void cancelMessage(string requestId) {
    netspireSDKPINVOKE.PAController_cancelMessage__SWIG_1(swigCPtr, requestId);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void cancelMessage(Message.Type messageType) {
    netspireSDKPINVOKE.PAController_cancelMessage__SWIG_2(swigCPtr, (int)messageType);
  }

  public ScheduleDefinitionArray listSchedules() {
    ScheduleDefinitionArray ret = new ScheduleDefinitionArray(netspireSDKPINVOKE.PAController_listSchedules(swigCPtr), true);
    return ret;
  }

  public void createSchedule(ScheduleDefinition scheduleDef) {
    netspireSDKPINVOKE.PAController_createSchedule(swigCPtr, ScheduleDefinition.getCPtr(scheduleDef));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public int createScheduleSync(ScheduleDefinition scheduleDef) {
    int ret = netspireSDKPINVOKE.PAController_createScheduleSync(swigCPtr, ScheduleDefinition.getCPtr(scheduleDef));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void modifySchedule(ScheduleDefinition scheduleDef) {
    netspireSDKPINVOKE.PAController_modifySchedule(swigCPtr, ScheduleDefinition.getCPtr(scheduleDef));
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteSchedule(int scheduleId) {
    netspireSDKPINVOKE.PAController_deleteSchedule(swigCPtr, scheduleId);
  }

  public TTSVocalizerArray getTTSVocalizerList() {
    TTSVocalizerArray ret = new TTSVocalizerArray(netspireSDKPINVOKE.PAController_getTTSVocalizerList(swigCPtr), true);
    return ret;
  }

  public void startUserRecording(string absolutePathWithFileName) {
    netspireSDKPINVOKE.PAController_startUserRecording(swigCPtr, absolutePathWithFileName);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void stopUserRecording() {
    netspireSDKPINVOKE.PAController_stopUserRecording(swigCPtr);
  }

  public void previewUserRecording(string absolutePathWithFileName) {
    netspireSDKPINVOKE.PAController_previewUserRecording(swigCPtr, absolutePathWithFileName);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deleteUserRecording(string absolutePathWithFileName) {
    netspireSDKPINVOKE.PAController_deleteUserRecording(swigCPtr, absolutePathWithFileName);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
