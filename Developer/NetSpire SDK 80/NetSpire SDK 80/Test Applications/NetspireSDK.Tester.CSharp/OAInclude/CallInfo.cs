/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class CallInfo : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CallInfo(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CallInfo obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CallInfo() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_CallInfo(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public CallInfo() : this(netspireSDKPINVOKE.new_CallInfo__SWIG_0(), true) {
  }

  public CallInfo(CallInfo callInfoAnother) : this(netspireSDKPINVOKE.new_CallInfo__SWIG_1(CallInfo.getCPtr(callInfoAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint callId {
    set {
      netspireSDKPINVOKE.CallInfo_callId_set(swigCPtr, value);
    } 
    get {
      uint ret = netspireSDKPINVOKE.CallInfo_callId_get(swigCPtr);
      return ret;
    } 
  }

  public string callStartTime {
    set {
      netspireSDKPINVOKE.CallInfo_callStartTime_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.CallInfo_callStartTime_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint callDuration {
    set {
      netspireSDKPINVOKE.CallInfo_callDuration_set(swigCPtr, value);
    } 
    get {
      uint ret = netspireSDKPINVOKE.CallInfo_callDuration_get(swigCPtr);
      return ret;
    } 
  }

  public uint callAnswerTime {
    set {
      netspireSDKPINVOKE.CallInfo_callAnswerTime_set(swigCPtr, value);
    } 
    get {
      uint ret = netspireSDKPINVOKE.CallInfo_callAnswerTime_get(swigCPtr);
      return ret;
    } 
  }

  public string callAPartyId {
    set {
      netspireSDKPINVOKE.CallInfo_callAPartyId_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.CallInfo_callAPartyId_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string callBPartyId {
    set {
      netspireSDKPINVOKE.CallInfo_callBPartyId_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.CallInfo_callBPartyId_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string callTargetIds {
    set {
      netspireSDKPINVOKE.CallInfo_callTargetIds_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.CallInfo_callTargetIds_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CallInfo.State callState {
    set {
      netspireSDKPINVOKE.CallInfo_callState_set(swigCPtr, (int)value);
    } 
    get {
      CallInfo.State ret = (CallInfo.State)netspireSDKPINVOKE.CallInfo_callState_get(swigCPtr);
      return ret;
    } 
  }

  public string callStateText {
    set {
      netspireSDKPINVOKE.CallInfo_callStateText_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.CallInfo_callStateText_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int callType {
    set {
      netspireSDKPINVOKE.CallInfo_callType_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.CallInfo_callType_get(swigCPtr);
      return ret;
    } 
  }

  public string callTypeText {
    set {
      netspireSDKPINVOKE.CallInfo_callTypeText_set(swigCPtr, value);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = netspireSDKPINVOKE.CallInfo_callTypeText_get(swigCPtr);
      if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int callReleaseCause {
    set {
      netspireSDKPINVOKE.CallInfo_callReleaseCause_set(swigCPtr, value);
    } 
    get {
      int ret = netspireSDKPINVOKE.CallInfo_callReleaseCause_get(swigCPtr);
      return ret;
    } 
  }

  public bool callTransferredFlag {
    set {
      netspireSDKPINVOKE.CallInfo_callTransferredFlag_set(swigCPtr, value);
    } 
    get {
      bool ret = netspireSDKPINVOKE.CallInfo_callTransferredFlag_get(swigCPtr);
      return ret;
    } 
  }

  public CallPartyInfoArray callPartyList {
    set {
      netspireSDKPINVOKE.CallInfo_callPartyList_set(swigCPtr, CallPartyInfoArray.getCPtr(value));
    } 
    get {
      IntPtr cPtr = netspireSDKPINVOKE.CallInfo_callPartyList_get(swigCPtr);
      CallPartyInfoArray ret = (cPtr == IntPtr.Zero) ? null : new CallPartyInfoArray(cPtr, false);
      return ret;
    } 
  }

  public enum State {
    PROGRESS,
    CONNECTED,
    HELD,
    DISCONNECTED,
    UNKNOWN
  }

}

}
