/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class Device : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Device(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Device obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Device() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_Device(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Device(int elemNo, string name, int nsType, int dstNo, int PortNo, string deviceModelName_) : this(netspireSDKPINVOKE.new_Device__SWIG_0(elemNo, name, nsType, dstNo, PortNo, deviceModelName_), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Device(int elemNo, string name, int nsType, int dstNo, int PortNo) : this(netspireSDKPINVOKE.new_Device__SWIG_1(elemNo, name, nsType, dstNo, PortNo), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Device(int elemNo, string name, int nsType, int dstNo) : this(netspireSDKPINVOKE.new_Device__SWIG_2(elemNo, name, nsType, dstNo), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Device(int elemNo, string name, int nsType) : this(netspireSDKPINVOKE.new_Device__SWIG_3(elemNo, name, nsType), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Device(int elemNo, string name) : this(netspireSDKPINVOKE.new_Device__SWIG_4(elemNo, name), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public Device(int elemNo) : this(netspireSDKPINVOKE.new_Device__SWIG_5(elemNo), true) {
  }

  public Device() : this(netspireSDKPINVOKE.new_Device__SWIG_6(), true) {
  }

  public Device(Device deviceAnother) : this(netspireSDKPINVOKE.new_Device__SWIG_7(Device.getCPtr(deviceAnother)), true) {
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setEnabled(bool enabled) {
    netspireSDKPINVOKE.Device_setEnabled(swigCPtr, enabled);
  }

  public virtual string getName() {
    string ret = netspireSDKPINVOKE.Device_getName(swigCPtr);
    return ret;
  }

  public virtual Device.State getState() {
    Device.State ret = (Device.State)netspireSDKPINVOKE.Device_getState(swigCPtr);
    return ret;
  }

  public string getStateText() {
    string ret = netspireSDKPINVOKE.Device_getStateText(swigCPtr);
    return ret;
  }

  public KeyValueMap getSupplementaryFields() {
    KeyValueMap ret = new KeyValueMap(netspireSDKPINVOKE.Device_getSupplementaryFields(swigCPtr), true);
    return ret;
  }

  public Device.HealthTestStatus getHealthTestStatus() {
    Device.HealthTestStatus ret = (Device.HealthTestStatus)netspireSDKPINVOKE.Device_getHealthTestStatus(swigCPtr);
    return ret;
  }

  public bool getDictionarySupport() {
    bool ret = netspireSDKPINVOKE.Device_getDictionarySupport(swigCPtr);
    return ret;
  }

  public uint getDictionaryVersion() {
    uint ret = netspireSDKPINVOKE.Device_getDictionaryVersion(swigCPtr);
    return ret;
  }

  public Device.DictionaryUpdateStatus getDictionaryUpdateStatus() {
    Device.DictionaryUpdateStatus ret = (Device.DictionaryUpdateStatus)netspireSDKPINVOKE.Device_getDictionaryUpdateStatus(swigCPtr);
    return ret;
  }

  public bool getInputState(int inputNo) {
    bool ret = netspireSDKPINVOKE.Device_getInputState(swigCPtr, inputNo);
    return ret;
  }

  public bool getOutputState(int outputNo) {
    bool ret = netspireSDKPINVOKE.Device_getOutputState(swigCPtr, outputNo);
    return ret;
  }

  public void setOutputState(uint outputNo, uint state) {
    netspireSDKPINVOKE.Device_setOutputState(swigCPtr, outputNo, state);
  }

  public int getDstNo() {
    int ret = netspireSDKPINVOKE.Device_getDstNo(swigCPtr);
    return ret;
  }

  public int getPortNo() {
    int ret = netspireSDKPINVOKE.Device_getPortNo(swigCPtr);
    return ret;
  }

  public string getIP() {
    string ret = netspireSDKPINVOKE.Device_getIP(swigCPtr);
    return ret;
  }

  public string getSoftwareRevision() {
    string ret = netspireSDKPINVOKE.Device_getSoftwareRevision(swigCPtr);
    return ret;
  }

  public string getLocationName() {
    string ret = netspireSDKPINVOKE.Device_getLocationName(swigCPtr);
    return ret;
  }

  public string getLocationId() {
    string ret = netspireSDKPINVOKE.Device_getLocationId(swigCPtr);
    return ret;
  }

  public string getDeviceIndex() {
    string ret = netspireSDKPINVOKE.Device_getDeviceIndex(swigCPtr);
    return ret;
  }

  public Device.DeviceClass getDeviceClass() {
    Device.DeviceClass ret = (Device.DeviceClass)netspireSDKPINVOKE.Device_getDeviceClass(swigCPtr);
    return ret;
  }

  public DeviceModel getDeviceModel() {
    DeviceModel ret = new DeviceModel(netspireSDKPINVOKE.Device_getDeviceModel(swigCPtr), true);
    return ret;
  }

  public void setCondition(string conditionName, bool value) {
    netspireSDKPINVOKE.Device_setCondition__SWIG_0(swigCPtr, conditionName, value);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setCondition(string conditionName, string value) {
    netspireSDKPINVOKE.Device_setCondition__SWIG_1(swigCPtr, conditionName, value);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getCondition(string conditionName) {
    bool ret = netspireSDKPINVOKE.Device_getCondition(swigCPtr, conditionName);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public char getRoleId() {
    char ret = netspireSDKPINVOKE.Device_getRoleId(swigCPtr);
    return ret;
  }

  public void setDstNo(int dstNo) {
    netspireSDKPINVOKE.Device_setDstNo(swigCPtr, dstNo);
  }

  public int getNetSpireType() {
    int ret = netspireSDKPINVOKE.Device_getNetSpireType(swigCPtr);
    return ret;
  }

  public string getNameNotModified() {
    string ret = netspireSDKPINVOKE.Device_getNameNotModified(swigCPtr);
    return ret;
  }

  public string getDeviceModelName() {
    string ret = netspireSDKPINVOKE.Device_getDeviceModelName(swigCPtr);
    return ret;
  }

  public enum State {
    IDLE = 0,
    ALERTING,
    ACTIVE,
    HELD,
    ESCALATED,
    ISOLATED,
    FAULTY,
    COMMSFAULT,
    INACTIVE
  }

  public enum DeviceClass {
    UNKNOWN_DEVICE = 0,
    COMMUNICATIONS_EXCHANGE,
    NETWORK_AUDIO_CONTROLLER,
    OPERATOR_CONSOLE,
    MONITOR_SPEAKER,
    HELP_POINT,
    PASSENGER_INFORMATION_DISPLAY,
    TRAIN_RADIO
  }

  public enum HealthTestStatus {
    TEST_PENDING = 0,
    TEST_NONE,
    TEST_IN_PROGRESS
  }

  public enum DictionaryUpdateStatus {
    DICT_UPDATE_NONE = 0,
    DICT_UPDATE_IN_PROGRESS,
    DICT_UPDATE_FAILED,
    DICT_UPDATE_PENDING
  }

}

}
