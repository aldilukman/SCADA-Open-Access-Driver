/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class Trip : NamedId {
  private HandleRef swigCPtr;

  internal Trip(IntPtr cPtr, bool cMemoryOwn) : base(netspireSDKPINVOKE.Trip_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Trip obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Trip() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_Trip(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Trip() : this(netspireSDKPINVOKE.new_Trip__SWIG_0(), true) {
  }

  public Trip(int id) : this(netspireSDKPINVOKE.new_Trip__SWIG_1(id), true) {
  }

  public void setLineId(int lineId) {
    netspireSDKPINVOKE.Trip_setLineId(swigCPtr, lineId);
  }

  public int getLineId() {
    int ret = netspireSDKPINVOKE.Trip_getLineId(swigCPtr);
    return ret;
  }

  public void setDirection(Trip.Direction direction) {
    netspireSDKPINVOKE.Trip_setDirection(swigCPtr, (int)direction);
  }

  public Trip.Direction getDirection() {
    Trip.Direction ret = (Trip.Direction)netspireSDKPINVOKE.Trip_getDirection(swigCPtr);
    return ret;
  }

  public void setPriority(Trip.Priority priority) {
    netspireSDKPINVOKE.Trip_setPriority(swigCPtr, (int)priority);
  }

  public Trip.Priority getPriority() {
    Trip.Priority ret = (Trip.Priority)netspireSDKPINVOKE.Trip_getPriority(swigCPtr);
    return ret;
  }

  public void setPriorityText(string priorityText) {
    netspireSDKPINVOKE.Trip_setPriorityText(swigCPtr, priorityText);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getPriorityText() {
    string ret = netspireSDKPINVOKE.Trip_getPriorityText(swigCPtr);
    return ret;
  }

  public void setStopsListAsString(string stopsListAsString) {
    netspireSDKPINVOKE.Trip_setStopsListAsString(swigCPtr, stopsListAsString);
    if (netspireSDKPINVOKE.SWIGPendingException.Pending) throw netspireSDKPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getStopsListAsString() {
    string ret = netspireSDKPINVOKE.Trip_getStopsListAsString(swigCPtr);
    return ret;
  }

  public enum Direction {
    DESCENDING,
    ASCENDING
  }

  public enum Priority {
    ALL_STOPS,
    LIMITED_STOPS,
    EXPRESS
  }

}

}
