/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace netspire {

using System;
using System.Runtime.InteropServices;

public class Gain : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Gain(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Gain obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Gain() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          netspireSDKPINVOKE.delete_Gain(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Gain() : this(netspireSDKPINVOKE.new_Gain__SWIG_0(), true) {
  }

  public Gain(double level) : this(netspireSDKPINVOKE.new_Gain__SWIG_1(level), true) {
  }

  public void setLevel(double level) {
    netspireSDKPINVOKE.Gain_setLevel(swigCPtr, level);
  }

  public double getLevel() {
    double ret = netspireSDKPINVOKE.Gain_getLevel(swigCPtr);
    return ret;
  }

}

}
